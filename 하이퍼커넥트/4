To implement the ControlledPromise class, you can create a promise internally, and control the resolution of this promise using the resolve and reject functions.



class ControlledPromise<T> {
  private resolve!: (value: T) => void;
  private reject!: (message?: any) => void;
  private promise: Promise<T>;
  
  constructor() {
    this.promise = new Promise<T>((resolve, reject) => {
      this.resolve = resolve;
      this.reject = reject
    })
  }
  
  finish(value: T) {
    this.resolve(value)
  }
  
  wait(){
    return this.promise
  }
}

// Example usage
/*
const controlledPromise = new ControlledPromise<string>();

setTimeout(() => {
  controlledPromise.finish('hello');
}, 1000);

(async() => {
  const value = await controlledPromise.wait();
  console.log(value); // hello
})();
*/
