<html>
  <head>
    <meta charset="UTF-8" />
    <title>출력결과</title>
  </head>
  <body>
    <script>
      function solution(arr) {
        let ch = Array.from({ length: arr.length + 1 }, () => 0);
        let result = "NO";

        function dfs(v) {
          let left = [];
          let right = [];
          if (v === arr.length + 1) {
            for (let i = 1; i <= arr.length; i++) {
              if (ch[i] === 0) {
                left.push(arr[i - 1]);
              } else {
                right.push(arr[i - 1]);
              }
            }
            const leftSum = left.reduce((acc, cur) => acc + cur, 0);
            const rightSum = right.reduce((acc, cur) => acc + cur, 0);
            if (leftSum === rightSum) {
              result = "YES";
              return result;
            }
          } else {
            ch[v] = 1;
            dfs(v + 1);
            ch[v] = 0;
            dfs(v + 1);
          }
        }
        dfs(1);
        return result;
      }

      let arr = [1, 3, 5, 6, 7, 10];
      console.log(solution(arr));
    </script>
  </body>
</html>

// 권장 풀이
// sum을 구하기 위해 부분 집합이 생길때 반복문을 돌리는거 보다 재귀 하면서 sum을 넘기는게 시간복잡도가 낮음
<html>
  <head>
    <meta charset="UTF-8" />
    <title>출력결과</title>
  </head>
  <body>
    <script>
      function solution(arr) {
        let answer = "NO";
        let total = arr.reduce((acc, cur) => acc + cur, 0);
        let n = arr.length;
        flag = 0;
        function dfs(L, sum) {
          if (flag === 1) return;
          if (L === n) {
            if (total - sum === sum) {
              answer = "YES";
              flag = 1;
            }
          } else {
            // 포함
            dfs(L + 1, sum + arr[L]);
            // 미포함
            dfs(L + 1, sum);
          }
        }
        dfs(0, 0);
        return answer;
      }
      let arr = [1, 3, 5, 6, 7, 10];
      console.log(solution(arr));
    </script>
  </body>
</html>
