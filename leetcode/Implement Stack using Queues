// https://leetcode.com/problems/implement-stack-using-queues
var MyStack = function() {
    this.queue1 = []
    this.queue2 = []
};

/** 
 * @param {number} x
 * @return {void}
 */
MyStack.prototype.push = function(x) {
    this.queue1.push(x)
};

/**
 * @return {number}
 */
MyStack.prototype.pop = function() {
    while(this.queue1.length > 1){
        this.queue2.push(this.queue1.shift())
    }
    const num = this.queue1.shift()
    this.queue1 = this.queue2
    this.queue2 = []
    return num
};

/**
 * @return {number}
 */
MyStack.prototype.top = function() {
     while(this.queue1.length > 1){
        this.queue2.push(this.queue1.shift())
    }
    const num = this.queue1.shift()
    this.queue1 = this.queue2
    this.queue1.push(num)
    this.queue2 = []
    return num
};

/**
 * @return {boolean}
 */
MyStack.prototype.empty = function() {
    return this.queue1.length === 0
};

// /** 
//  * Your MyStack object will be instantiated and called as such:
//  * var obj = new MyStack()
//  * obj.push(x)
//  * var param_2 = obj.pop()
//  * var param_3 = obj.top()
//  * var param_4 = obj.empty()
//  */

// var Stack = function() {
//     this.queue = [];
//     this.tmp = [];
// };

// /**
//  * @param {number} x
//  * @returns {void}
//  */
// Stack.prototype.push = function(x) {
//     this.queue.push(x);
// };

// /**
//  * @returns {void}
//  */
// Stack.prototype.pop = function() {
//     while (this.queue.length > 1){
//         this.tmp.push(this.queue.shift());
//     }
//     this.queue.shift();
//     this.queue = this.tmp;
//     this.tmp = [];
// };

// /**
//  * @returns {number}
//  */
// Stack.prototype.top = function() {
//     while (this.queue.length > 1){
//         this.tmp.push(this.queue.shift());
//     }
//     var ele = this.queue.shift();
//     this.tmp.push(ele);
//     this.queue = this.tmp;
//     this.tmp = [];
//     return ele;
// };

// /**
//  * @returns {boolean}
//  */
// Stack.prototype.empty = function() {
//     return this.queue.length === 0;
    
// };
