/**
 * @param {number[][]} matrix
 * @param {number} target
 * @return {boolean}
 */
 
// O(m * log(n)
var searchMatrix = function(matrix, target) {
    for(let i=0; i<matrix.length; i++){
        if(matrix[i][matrix[i].length-1] >= target){
            return binarySearch(matrix[i], target)
        }
    }
    return false
};

const binarySearch = (nums, target) => {
    let start = 0
    let end = nums.length - 1

    while(start <= end){
        let mid = Math.floor((start + end) / 2)

        if(target === nums[mid]){
            return true
        }
        else if(target < nums[mid]){
            end = mid - 1
        }
        else{
            start = mid + 1
        }
    }

    return false
}


// O(log(m * n))
// 2차원 배열에서 col의 개수가 m일 때, row = index / m, col = index % m 을 이용
var searchMatrix = function(matrix, target) {
    let start = 0
    let m = matrix[0].length // col
    let n = matrix.length // row
    let end = m*n-1

    while(start <= end){
        let mid = Math.floor((start + end) / 2)
        let col = mid % m
        let row = Math.floor(mid / m)


        console.log(mid, col, row)

        if(matrix[row][col] === target){
            return true
        }
        if(matrix[row][col] < target){
            start = mid + 1
        }
        else{
            end = mid - 1
        }
    }

    return false
};
