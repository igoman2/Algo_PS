/**
 * // Definition for a Node.
 * function Node(val,children) {
 *    this.val = val;
 *    this.children = children;
 * };
 */

/**
 * @param {Node|null} root
 * @return {number}
 */
// DFS
var maxDepth = function(root) {
    function dfs(p){
        if(!root)
            return 0;
        let maxDepth = 0
        for(let i=0; i<p.children.length; i++){
            const depth = dfs(p.children[i])
            maxDepth = Math.max(maxDepth, depth)
        }
        return maxDepth + 1
    }
    return dfs(root)
};

// BFS
var maxDepth = function(root) {
    if(!root) return 0;
    let queue = [], depthCount = 0;
    queue.push(root);
    
    while(queue.length > 0){
        let len = queue.length;
        
        for(let i = 0; i < len; i++){
            let node = queue.shift();
            for(let child of node.children) queue.push(child);
        }
        depthCount++;
    }
    return depthCount;
}
