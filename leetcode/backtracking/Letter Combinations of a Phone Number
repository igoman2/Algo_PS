// https://leetcode.com/problems/letter-combinations-of-a-phone-number
/**
 * @param {string} digits
 * @return {string[]}
 */
let letterCombinations = function(digits) {
    if(digits.length < 1) return [];
    let map = {
        2: ['a', 'b', 'c'],
        3: ['d', 'e', 'f'],
        4: ['g', 'h', 'i'],
        5: ['j', 'k', 'l'],
        6: ['m', 'n', 'o'],
        7: ['p', 'q', 'r', 's'],
        8: ['t', 'u', 'v'],
        9: ['w', 'x', 'y', 'z'],
    }

    
    const result = []

    function dfs(subStr, index){
        if(index === digits.length){
            result.push(subStr)
            return;
        }
        for(let val of map[digits[index]]){
            dfs(subStr + val, index+1)
        }
    }
    dfs('', 0)
    return result
};
