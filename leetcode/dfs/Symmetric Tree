/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function(root) {
    const left = root.left
    const right = root.right

    const leftArray = []
    const rightArray = []

    function leftTraversal(node){
        if(!node){
            leftArray.push(-1)
            return
        }
        leftArray.push(node.val)
        leftTraversal(node.right)
        leftTraversal(node.left)
    }

    function rightTraversal(node){
        if(!node){
            rightArray.push(-1)
            return
        }
        rightArray.push(node.val)
        rightTraversal(node.left)
        rightTraversal(node.right)
    }

    leftTraversal(left)
    rightTraversal(right)

    for(i=0; i<leftArray.length; i++){
        if(leftArray[i] !== rightArray[i]){
            return false
        }
    }

    return true
};


 // 다른 풀이
var isSymmetric = function(root) {
    let leftTree = root.left
    let rightTree = root.right

    function solve(p,q){
        if(p == null && q == null){
            return true
        }
        if(p == null || q == null){
            return false
        }
        if(p.val != q.val){
            return false
        }
        
        return solve(p.left, q.right) && solve(p.right, q.left)
    }
    
    return solve(root.left, root.right)
};
