// https://leetcode.com/problems/flood-fill
/**
 * @param {number[][]} image
 * @param {number} sr
 * @param {number} sc
 * @param {number} newColor
 * @return {number[][]}
 */
// dfs
var floodFill = function(image, sr, sc, newColor) {
    if(image[sr][sc] == newColor)
        return image
    const startingPixel = image[sr][sc]
    function traversal(image, sr, sc, newColor, startingPixel){
        if(sr < 0 || sr >= image.length || sc < 0 || sc >= image[sr].length)
            return image
        if(image[sr][sc] !== startingPixel)
            return image
        image[sr][sc] = newColor
        traversal(image, sr+1, sc, newColor, startingPixel)
        traversal(image, sr-1, sc, newColor, startingPixel)
        traversal(image, sr, sc+1, newColor, startingPixel)
        traversal(image, sr, sc-1, newColor, startingPixel)
        return image
    }
    traversal(image, sr, sc, newColor, startingPixel)
    return image
};

// bfs
var floodFill = function(image, sr, sc, newColor) {
    const currColor = image[sr][sc];
    if(currColor === newColor) return image;
    const queue = [[sr, sc]];
    
    while(queue.length) {
        const [row, col] = queue.shift()
        if(image[row][col] == currColor){
            image[row][col] = newColor
            if(row-1 >= 0)
                queue.push([row-1, col])
            if(row+1 < image.length)
                queue.push([row+1, col])
            if(col-1 >= 0)
                queue.push([row, col-1])
            if(col+1 < image[0].length)
                queue.push([row, col+1])
        }
    }
    return image;
};
