// https://leetcode.com/problems/binary-tree-right-side-view

// bfs 
var rightSideView = function(root) {
    if(!root)
        return []
    const answer = []
    const queue = [root]
    const map = new Map()
    let level = 0
    while(queue.length > 0) {
        const LENGTH = queue.length
        for(let i=0; i<LENGTH; i++){
            const current = queue.shift()
            if(map.has(level)){
                map.get(level).push(current.val)
            }
            else{
                map.set(level, [current.val])
            }
            if(current.left)
                queue.push(current.left)
            if(current.right)
                queue.push(current.right)
        }
        level++
    }
    for(let [key, val] of map){
        answer.push(val[val.length-1])
    }  
    return answer
};

// dfs 
var rightSideView = function(root) {
    const map = new Map()
    const answer = []
    function dfs(p, level){
        if(!p){
            return ;
        }
        
        let currentLevel = level+1
        if(map.has(currentLevel)){
            map.get(currentLevel).push(p.val)
        }
        else{
            map.set(currentLevel, [p.val])
        }
        dfs(p.left, currentLevel)
        dfs(p.right, currentLevel)
    }
    dfs(root, 0)
    for(let [key, val] of map){
        answer.push(val[val.length-1])
    }  
    return answer
};

// 다른 풀이
// map 쓸 필요도 없이 배열 인덱스에 나중에 연산될 오른쪽 값으로 덮어씌우면 됨
var rightSideView = function(root) {
    const answer = []
    let level = 0
    function dfs(p, level){
        if(!p)
            return ;
        answer[level] = p.val
        dfs(p.left, level+1)
        dfs(p.right, level+1)
    }
    dfs(root, 0)
    return answer
};
