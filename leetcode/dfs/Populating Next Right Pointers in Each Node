// https://leetcode.com/problems/populating-next-right-pointers-in-each-node/submissions
/**
 * // Definition for a Node.
 * function Node(val, left, right, next) {
 *    this.val = val === undefined ? null : val;
 *    this.left = left === undefined ? null : left;
 *    this.right = right === undefined ? null : right;
 *    this.next = next === undefined ? null : next;
 * };
 */

/**
 * @param {Node} root
 * @return {Node}
 */
 
// dfs
var connect = function(root){
    if (root == null || root.left == null) return root;
    root.left.next = root.right;
    root.right.next = root.next ? root.next.left : null;
    connect(root.left)
    connect(root.right)
    return root
}

// bfs
var connect = function(root){
    if(!root)
        return root
    const queue = [root]
    while(queue.length > 0){
        const length = queue.length
        for(let i=0; i<length; i++){
            const current = queue.shift()
            if(i+1 < length)
                current.next = queue[0]
            if(current.left){
                queue.push(current.left)
            }
            if(current.right){
                queue.push(current.right)
            }
        }
    }
    return root
}
