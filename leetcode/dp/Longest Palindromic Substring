// https://leetcode.com/problems/longest-palindromic-substring
/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function (s) {
    let maxSubString = ''
    for(let i=0; i<s.length; i++){
        for(let j=0; j<=i; j++){
            if(i+1-j < maxSubString.length){
                continue
            }
            let subString = s.substring(j, i+1)
            if(isPalindrome(subString)){
                if(subString.length > maxSubString.length){
                    maxSubString = subString
                }
            }
        }
    }
    return maxSubString
}
function isPalindrome(str){
    let left = 0;
    let right = str.length - 1
    while(left < right){
        if(str[left] !== str[right]){
            return false
        }
        left++
        right--
    }
    return true
}


/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function(s) {
    // O(n^3)
    // let currentString = ''
    // let result = ''
    // for(let i=0; i<s.length; i++){
    //     currentString = ''
    //     for(let j=i; j<s.length; j++){
    //         currentString += s[j]
    //         if(checkPalindromic(currentString)){
    //             if(currentString.length > result.length){
    //                 result = currentString
    //             }
    //         }
    //     }
    // }

    // return result

    // O(n^2)
    if (s.length === 0)
        return "";
    if (s.length === 1)
        return s;

    let left = 0
    let right = left + 1
    let currentString = s[left]
    let result = ''
    while(left < s.length){
        if(currentString.length > result.length){  
            if(checkPalindromic(currentString)){
                result = currentString  
            }
        }
        if(right === s.length){
            right = left + 1
            left++
            currentString = ''
        }
        currentString += s[right++]
    }

    return result
};

const checkPalindromic = (value) => {
    for(let i=0; i<value.length; i++){
        if(value[i] !== value[value.length - 1 - i]){
            return false
        }
    }

    return true
}
